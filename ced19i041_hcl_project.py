# -*- coding: utf-8 -*-
"""CED19I041_HCL_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DL1cF1b1VFclkgea4v_Ei7goDMuBE9uD

# Car Price Prediction
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score

"""# Working with another data set"""

used_car_df=pd.read_csv(".venv/ML/used_cars_train_data.csv")


df2=used_car_df.copy()





"""### Dividing into training and testing datasets"""

X_train, X_test, y_train, y_test = train_test_split(df2.iloc[:, :-1], 
                                                    df2.iloc[:, -1], 
                                                    test_size = 0.3, 
                                                    random_state = 42)

"""###The first column is the index for each data point and hence we can simply remove it."""

X_train = X_train.iloc[:, 1:]
X_test = X_test.iloc[:, 1:]

"""### As we have cars with names but not with company names let's create new column for company i.e is brand"""

new_col_train = X_train["Name"].str.split(" ", expand = True)
new_col_test = X_test["Name"].str.split(" ", expand = True)

X_train["Brand"]=new_col_train[0]
X_test["Brand"]=new_col_test[0]


"""### Notice that Mileage, Engine,Power ,Prices are not int or float, lets clean data and convert them

#### Mileage
"""

mileage_train = X_train["Mileage"].str.split(" ", expand = True)
mileage_test = X_test["Mileage"].str.split(" ", expand = True)

X_train["Mileage"] = pd.to_numeric(mileage_train[0], errors = 'coerce')
X_test["Mileage"] = pd.to_numeric(mileage_test[0], errors = 'coerce')

"""### Engine"""

cc_train = X_train["Engine"].str.split(" ", expand = True)
cc_test = X_test["Engine"].str.split(" ", expand = True)

X_train["Engine"] = pd.to_numeric(cc_train[0], errors = 'coerce')
X_test["Engine"] = pd.to_numeric(cc_test[0], errors = 'coerce')

"""#### Power"""

bhp_train = X_train["Power"].str.split(" ", expand = True)
bhp_test = X_test["Power"].str.split(" ", expand = True)

X_train["Power"] = pd.to_numeric(bhp_train[0], errors = 'coerce')
X_test["Power"] = pd.to_numeric(bhp_test[0], errors = 'coerce')

"""####New_price

"""

"""#### Let's Check is there any relation between some of the numerical columns"""


"""### Filling the missing values with mean of their respective column As they are numerical"""

X_train["Engine"].fillna(X_train["Engine"].astype("float64").mean(), inplace = True)
X_test["Engine"].fillna(X_train["Engine"].astype("float64").mean(), inplace = True)

X_train["Mileage"].fillna(X_train["Mileage"].astype("float64").mean(), inplace = True)
X_test["Mileage"].fillna(X_train["Mileage"].astype("float64").mean(), inplace = True)

X_train["Power"].fillna(X_train["Power"].astype("float64").mean(), inplace = True)
X_test["Power"].fillna(X_train["Power"].astype("float64").mean(), inplace = True)

X_train["Seats"].fillna(X_train["Seats"].astype("float64").mean(), inplace = True)
X_test["Seats"].fillna(X_train["Seats"].astype("float64").mean(), inplace = True)



"""#### lets drop New Price column because it doesnot have impact on the """

X_train.drop(["New_Price"], axis = 1, inplace = True)
X_test.drop(["New_Price"], axis = 1, inplace = True)

X_train.drop(["Name"], axis = 1, inplace = True)
X_test.drop(["Name"], axis = 1, inplace = True)

X_train.drop(["Location"], axis = 1, inplace = True)
X_test.drop(["Location"], axis = 1, inplace = True)

"""#### Now that we have worked with the training data, let's create dummy columns for categorical columns before we begin training."""

X_train = pd.get_dummies(X_train,columns = ["Brand", "Fuel_Type", "Transmission", "Owner_Type"],
                         drop_first = True)
X_test = pd.get_dummies(X_test,columns = ["Brand", "Fuel_Type", "Transmission", "Owner_Type"],
                         drop_first = True)


"""#### If some of the categorical columns doesnot created in test dataset because of its less count of unique values,lets fill them"""

missing_cols = set(X_train.columns) - set(X_test.columns)
for col in missing_cols:
    X_test[col] = 0
X_test = X_test[X_train.columns]

X_train_df=X_train.copy()
X_test_df=X_test.copy()


"""#### Scaling the data"""

standardScaler = StandardScaler()
standardScaler.fit(X_train)
X_train = standardScaler.transform(X_train)
X_test = standardScaler.transform(X_test)

"""#### Training and testing with  Linear Regression Model

*   List item
*   List item


"""

linearRegression = LinearRegression()
linearRegression.fit(X_train, y_train)
y_pred = linearRegression.predict(X_test)
r2_score(y_test, y_pred)

"""#### Training and testing with  Random Forest Model"""

rf = RandomForestRegressor(n_estimators = 100)
rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)
r2_score(y_test, y_pred)



